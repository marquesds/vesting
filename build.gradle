plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'application'
    id 'java'
    id 'jacoco'
}

group 'com.carta'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("com.github.doyaaaaaken:kotlin-csv-jvm:1.1.0")
    implementation("log4j:log4j:1.2.17")
    implementation("org.apache.logging.log4j:log4j-slf4j18-impl:2.14.1")
    testImplementation(platform("org.junit:junit-bom:5.8.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("io.strikt:strikt-core:0.31.0")
    testImplementation("com.appmattus.fixture:fixture:1.2.0")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.jacocoTestReport {
    finalizedBy(tasks.jacocoTestCoverageVerification)
    executionData.from(files(fileTree(rootDir.absolutePath).include("**/build/jacoco/test.exec")))
    reports {
        xml.required.set(true)
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/carta/MainKt.class",
                    "**/resources/*"
            ])
        }))
    }
}

tasks.jacocoTestCoverageVerification {
    executionData.from(files(fileTree(rootDir.absolutePath).include("**/build/jacoco/test.exec")))
    violationRules {
        rule {
            limit {
                counter = "LINE"
                minimum = "0.90".toBigDecimal()
            }
        }
    }
}

tasks.register("unittest", Test) {
    outputs.upToDateWhen { false }
    useJUnitPlatform {
        includeTags = ["unit"]
        excludeTags = ["integration"]
    }
    testLogging {
        events("passed", "skipped", "failed")
    }
}

tasks.register("integrationtest", Test) {
    outputs.upToDateWhen { false }
    useJUnitPlatform {
        includeTags = ["integration"]
        excludeTags = ["unit"]
    }
    testLogging {
        events("passed", "skipped", "failed")
    }
}

jacocoTestReport {
    dependsOn test
}

application {
    mainClass.set("com.carta.MainKt")
}

tasks.register('uberJar', Jar) {
    manifest {
        attributes["Main-Class"] = "com.carta.MainKt"
        attributes["Multi-Release"] = true
    }

    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
